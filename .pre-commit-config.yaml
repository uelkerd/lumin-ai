# .pre-commit-config.yaml - Automated code quality checks before every commit
# This configuration ensures that all code meets quality standards before it enters the repository
# Pre-commit hooks act as your first line of defense against code quality issues

# Configuration format version
repos:
  # Repository 1: Pre-commit's own hooks for basic file hygiene
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.4.0
    hooks:
      # Basic file checks that prevent common mistakes
      - id: trailing-whitespace
        name: "Remove trailing whitespace"
        description: "Removes unnecessary spaces at the end of lines"

      - id: end-of-file-fixer
        name: "Ensure files end with newline"
        description: "Adds a newline at the end of files if missing"

      - id: check-yaml
        name: "Validate YAML files"
        description: "Ensures YAML files are properly formatted"
        files: \.(yaml|yml)$

      - id: check-added-large-files
        name: "Check for added large files"
        description: "Prevents committing files larger than a specified size"

      - id: check-merge-conflict
        name: "Check for merge conflicts"
        description: "Prevents committing files with unresolved merge conflict markers"

      - id: check-ast
        name: "Check for AST issues"
        description: "Prevents committing files with AST issues"

      - id: check-json
        name: "Validate JSON files"
        description: "Ensures JSON configuration files are properly formatted"

      - id: check-toml
        name: "Validate TOML files"
        description: "Ensures pyproject.toml and other TOML files are valid"

      - id: debug-statements
        name: "Check for debug statements"
        description: "Prevents committing Python debug statements like pdb.set_trace()"

  # Repository 2: Black for Python formatting
  - repo: https://github.com/psf/black
    rev: 23.3.0
    hooks:
      - id: black
        language_version: python3
        name: "Black formatting"
        description: "Applies consistent Python code formatting"
        # This will format your code according to the rules in pyproject.toml

  # Repository 3: Ruff for Python linting and formatting
  - repo: https://github.com/charliermarsh/ruff-pre-commit
    rev: 'v0.0.265'
    hooks:
      - id: ruff
        name: "Ruff linting"
        description: "Runs comprehensive Python linting using Ruff"
        args: [--fix, --exit-non-zero-on-fix]
        # --fix: Automatically fix issues that can be safely corrected
        # --exit-non-zero-on-fix: Fail the hook if fixes were applied (forces review)

  # Repository 4: ESLint for JavaScript linting (disabled until JS files are added)
  # - repo: https://github.com/pre-commit/mirrors-eslint
  #   rev: v8.40.0
  #   hooks:
  #     - id: eslint
  #       name: "ESLint linting"
  #       description: "Runs JavaScript linting using ESLint"
  #       files: \.(js|jsx|ts|tsx)$
  #       types: [file]
  #       additional_dependencies:
  #         - eslint@8.40.0
  #         - eslint-config-prettier@8.8.0

  # Repository 5: Jupyter notebook cleaning and validation
  - repo: https://github.com/nbQA-dev/nbQA
    rev: 1.7.1
    hooks:
      # Format Jupyter notebook code cells with Black
      - id: nbqa-black
        name: "Format Jupyter notebooks"
        description: "Formats code cells in Jupyter notebooks with Black"
        additional_dependencies: [black]

  # Repository 6: Security scanning with Detect Secrets
  - repo: https://github.com/Yelp/detect-secrets
    rev: v1.4.0
    hooks:
      - id: detect-secrets
        name: "Detect secrets"
        description: "Scans for accidentally committed secrets like API keys"
        exclude: ".allowlist|package-lock.json|yarn.lock|.devcontainer/docker-compose.yml"
        args: ['--baseline', '.secrets.baseline']

  # Repository 7: Prevent nested virtual environments
  - repo: local
    hooks:
      - id: prevent-nested-venv
        name: Prevent nested virtual environments
        entry: bash
        args: ['-c', 'if [ -n "$VIRTUAL_ENV" ] && [ $(echo "$VIRTUAL_ENV" | grep -c "venv") -gt 1 ]; then echo "‚ö†Ô∏è  ERROR: Nested virtual environment detected!"; echo "‚ùå  Current virtual environment: $VIRTUAL_ENV"; echo "üîÑ  Please run deactivate before activating another environment."; exit 1; fi; exit 0']
        language: system
        pass_filenames: false
        always_run: true

# Global configuration for all hooks
default_stages: [pre-commit]  # Run hooks on commit by default

# Specific language requirements
default_language_version:
  python: python3.10  # Ensure consistent Python version across all hooks

# Performance and behavior settings
minimum_pre_commit_version: "3.0.0"  # Require recent pre-commit version

# Fail fast - stop on first failure rather than running all hooks
fail_fast: false  # Set to true if you want to stop on first failure

# Configuration for specific file types
files: ''  # Apply to all files by default
exclude: |
  (?x)^(
      \.git/|
      \.tox/|
      \.venv/|
      venv/|
      \.eggs/|
      \.egg-info/|
      _build/|
      build/|
      dist/|
      \.mypy_cache/|
      \.pytest_cache/|
      \.ruff_cache/|
      node_modules/|
      data/raw/|
      data/processed/|
      models/trained/|
      .*\.egg-info/
  )$
