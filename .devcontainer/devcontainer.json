{
    "name": "LUMIN.AI Democratic Governance Analysis",
    "dockerComposeFile": "docker-compose.yml",
    "service": "lumin-dev-environment",
    "workspaceFolder": "/workspace",
    "customizations": {
        "vscode": {
            "extensions": [
                "ms-python.python",
                "ms-python.vscode-pylance",
                "ms-toolsai.jupyter",
                "ms-toolsai.vscode-jupyter-cell-tags",
                "bradlc.vscode-tailwindcss",
                "esbenp.prettier-vscode",
                "ms-vscode.vscode-typescript-next",
                "ms-toolsai.vscode-jupyter-powertoys",
                "ms-python.black-formatter",
                "ms-vscode.vscode-json",
                "redhat.vscode-yaml",
                "ms-vscode.hexeditor",
                "github.vscode-github-actions",
                "ms-azuretools.vscode-docker",
                "dbaeumer.vscode-eslint"
            ],
            "settings": {
                "editor.formatOnSave": true,
                "python.linting.enabled": true,
                "python.linting.pylintEnabled": false,
                "python.linting.flake8Enabled": true,
                "python.formatting.provider": "black",
                "python.formatting.blackArgs": [
                    "--line-length",
                    "88"
                ],
                "[python]": {
                    "editor.defaultFormatter": "ms-python.black-formatter",
                    "editor.formatOnSave": true,
                    "editor.codeActionsOnSave": {
                        "source.organizeImports": true
                    }
                },
                "[javascript]": {
                    "editor.defaultFormatter": "esbenp.prettier-vscode",
                    "editor.formatOnSave": true
                },
                "[typescript]": {
                    "editor.defaultFormatter": "esbenp.prettier-vscode",
                    "editor.formatOnSave": true
                },
                "[json]": {
                    "editor.defaultFormatter": "esbenp.prettier-vscode",
                    "editor.formatOnSave": true
                },
                "[yaml]": {
                    "editor.defaultFormatter": "redhat.vscode-yaml",
                    "editor.formatOnSave": true
                },
                "terminal.integrated.defaultProfile.linux": "zsh",
                "terminal.integrated.profiles.linux": {
                    "zsh": {
                        "path": "/bin/zsh"
                    }
                }
            }
        }
    },
    "forwardPorts": [
        3000,
        8000,
        9000
    ],
    "portsAttributes": {
        "3000": {
            "label": "Web Dashboard",
            "onAutoForward": "notify"
        },
        "8000": {
            "label": "ML API Services",
            "onAutoForward": "notify"
        },
        "9000": {
            "label": "Jupyter Notebooks",
            "onAutoForward": "notify"
        }
    },
    "postCreateCommand": "bash -c 'if [ -f \"/tmp/setup.sh\" ]; then chmod +x /tmp/setup.sh && /tmp/setup.sh; fi && if [ -f \"requirements-dev.txt\" ]; then pip install -r requirements-dev.txt; fi && if [ -f \"requirements-ds.txt\" ]; then pip install -r requirements-ds.txt; fi && if [ -f \"package.json\" ]; then npm install; fi && if [ -f \".pre-commit-config.yaml\" ]; then pre-commit install; fi'",
    "mounts": [
        "source=${localWorkspaceFolder}/data,target=/workspace/data,type=bind,consistency=cached",
        "source=${localWorkspaceFolder}/models,target=/workspace/models,type=bind,consistency=cached",
        "source=lumin-node-modules,target=/workspace/web/node_modules,type=volume"
    ],
    "remoteUser": "lumin-dev",
    "features": {
        "ghcr.io/devcontainers/features/docker-in-docker:2": {
            "version": "latest",
            "enableNonRootDocker": "true",
            "moby": "true"
        },
        "ghcr.io/devcontainers-contrib/features/pre-commit:2": {
            "version": "latest"
        }
    },
    "initializeCommand": "echo 'Preparing build context for devcontainer...'",
    "onCreateCommand": "echo 'Container created, running initial setup...'",
    "updateContentCommand": "echo 'Content updated, synchronizing dependencies...'",
    "postStartCommand": "echo 'Container started successfully!'",
    "postAttachCommand": {
        "notify-attached": "echo 'VS Code attached to container!'"
    },
    "runArgs": [
        "--shm-size=2gb",
        "--cpus=2",
        "--memory=4g"
    ],
    "shutdownAction": "stopContainer",
    "waitFor": "onCreateCommand"
}
