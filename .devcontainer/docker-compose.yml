# LUMIN.AI Development Environment - Optimized Build
# Using Compose spec

services:
  # Main development environment container
  lumin-dev-environment:
    build:
      context: ..
      dockerfile: .devcontainer/Dockerfile
      args:
        PYTHON_VERSION: "3.11"
        NODE_VERSION: "20"
        USERNAME: "lumin-dev"
      # BuildKit optimizations
      cache_from:
        - type=registry,ref=python:3.11-slim-bullseye
        - type=registry,ref=ghcr.io/<org>/devcontainer-lumin-dev-environment:latest
      # Use Compose BuildKit integration
      x-bake:
        platforms:
          - linux/amd64
        cache-to:
          - type=inline
        output:
          - type=docker

    command: sleep infinity

    # Add DNS configuration to fix apt-get update issues
    dns:
      - 8.8.8.8
      - 1.1.1.1

    # Use with host.docker.internal to access host services
    extra_hosts:
      - "host.docker.internal:host-gateway"

    # Improved volume mounts with selective bind mounts
    volumes:
      # Project source code (cached mode for better performance)
      - type: bind
        source: ..
        target: /workspace
        consistency: cached
      # Persistent Python package cache
      - type: volume
        source: lumin-python-packages
        target: /home/lumin-dev/.cache/pip
      # Persistent node modules
      - type: volume
        source: lumin-node-modules
        target: /workspace/node_modules
      # Persistent Jupyter notebooks data
      - type: volume
        source: lumin-jupyter-data
        target: /workspace/notebooks-data
      # Store logs in persistent volume
      - type: volume
        source: lumin-logs
        target: /workspace/.logs
      # Docker socket for Docker-in-Docker capabilities if needed
      #- type: bind
      #  source: /var/run/docker.sock
      #  target: /var/run/docker.sock

    # Port mapping (must match devcontainer.json forward ports)
    ports:
      - "3000:3000"   # React development server
      - "8000:8000"   # FastAPI/Flask service
      - "9000:9000"   # Jupyter notebook
      # Note: MongoDB is not directly exposed to host by default for security

    # Environment variables for development
    environment:
      BUILDKIT_PROGRESS: plain
      COMPOSE_DOCKER_CLI_BUILD: 1
      DOCKER_BUILDKIT: 1
      COMPOSE_BAKE: "true"
      # MongoDB connection settings
      MONGODB_HOST: governance-db
      MONGODB_PORT: 27017
      MONGODB_USERNAME: lumin
      MONGODB_PASSWORD: devpassword # pragma: allowlist secret
      MONGODB_DATABASE: governance_analysis
      JUPYTER_PORT: 9000

    # Enable all capabilities required for development
    # including running Docker in Docker if socket is mounted
    cap_add:
      - SYS_PTRACE
    security_opt:
      - seccomp:unconfined

    # Configure network for service communication
    networks:
      - lumin-network

    # Health check to ensure container is running properly
    healthcheck:
      test: ["CMD", "ps", "aux"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

    # Specify resource limits
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G

    # Add dependency on MongoDB
    depends_on:
      governance-db:
        condition: service_healthy

  # Lite development environment (no heavy ML/DS libs)
  lumin-lite-environment:
    build:
      context: ..
      dockerfile: .devcontainer/Dockerfile.lite
      args:
        PYTHON_VERSION: "3.11"
        NODE_VERSION: "20"
        USERNAME: "lumin-dev"
    command: sleep infinity
    
    # Add DNS configuration to fix apt-get update issues
    dns:
      - 8.8.8.8
      - 1.1.1.1
      
    volumes:
      - type: bind
        source: ..
        target: /workspace
        consistency: cached
      - type: volume
        source: lumin-python-packages-lite # Use a separate volume for lite packages
        target: /home/lumin-dev/.cache/pip
      - type: volume
        source: lumin-node-modules
        target: /workspace/node_modules
      - type: volume
        source: lumin-logs
        target: /workspace/.logs
    ports:
      - "3002:3000"
      - "8002:8000"
    networks:
      - lumin-network
    deploy:
      resources:
        limits:
          cpus: '1.5'
          memory: 2G

  # MongoDB service for data storage
  governance-db:
    image: mongo:6.0
    restart: unless-stopped
    volumes:
      - governance-db-data:/data/db
      - governance-db-config:/data/configdb
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')", "--quiet"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 30s

    # Configure network
    networks:
      - lumin-network

    # Specify resource limits
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G

# Volumes managed by Compose
volumes:
  governance-db-data:
    external: false
  governance-db-config:
    external: false
  lumin-python-packages:
    external: false
  lumin-python-packages-lite:
    external: false
  lumin-node-modules:
    external: false
  lumin-jupyter-data:
    external: false
  lumin-logs:
    external: false

# Network for container communication
networks:
  lumin-network:
    driver: bridge
    name: lumin-ai-network
    external: true
