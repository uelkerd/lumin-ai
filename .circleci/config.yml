# CircleCI configuration for LUMIN.AI with linting, testing, and coverage reporting
# This configuration focuses on code quality and test coverage reporting to Codecov

version: 2.1

# Using the latest version of the Python orb
orbs:
  python: circleci/python@2.0.1

# Define jobs for linting, testing, and coverage reporting
jobs:
  lint-python-code:
    # Use the default Python executor - this gives us a clean Linux environment with Python pre-installed
    executor: python/default

    steps:
      # Step 1: Get your code from the repository
      # This downloads all your project files so CircleCI can examine them
      - checkout

      # Step 2: Install Ruff
      # We install Ruff directly rather than from requirements.txt to keep things simple and fast
      # This ensures we always get the latest version and don't depend on your project dependencies
      - run:
          name: "Install Ruff linter"
          command: |
            echo "Installing Ruff - the lightning-fast Python linter..."
            pip install ruff==0.4.4

            # Show which version we installed for debugging purposes
            echo "Ruff version installed:"
            ruff --version

      # Step 3: Run Ruff across your entire Python codebase
      # This will check all Python files in your project for style and quality issues
      - run:
          name: "Lint Python code with Ruff"
          command: |
            echo "Running Ruff linter across the entire LUMIN.AI codebase..."
            echo "This will check for style issues, unused imports, and potential bugs..."

            # Run Ruff on the entire project
            # The '.' means "check everything in the current directory and subdirectories"
            # --output-format=github makes the output more readable in CircleCI
            ruff check . --output-format=github

            echo "Ruff linting completed successfully!"

      # Step 4: Check code formatting with Ruff
      # This verifies that your code follows consistent formatting standards
      # Running this separately makes it clear what type of issue needs fixing
      - run:
          name: "Check Python code formatting"
          command: |
            echo "Checking if Python code follows consistent formatting..."

            # Use Ruff's formatter to check if code is properly formatted
            # --check means "don't fix anything, just tell me if there are issues"
            # --diff shows exactly what would change if we ran the formatter
            ruff format --check --diff .

            echo "Code formatting check completed!"

      # Step 5: Generate a summary report
      # This gives you a nice overview of what was checked and any issues found
      - run:
          name: "Generate linting summary"
          command: |
            echo "=== LINTING SUMMARY FOR LUMIN.AI ==="
            echo "Directories checked:"
            find . -name "*.py" -type f | head -10 | sed 's|^./||'
            if [ $(find . -name "*.py" -type f | wc -l) -gt 10 ]; then
              echo "... and $(expr $(find . -name "*.py" -type f | wc -l) - 10) more Python files"
            fi

            echo ""
            echo "Total Python files scanned: $(find . -name "*.py" -type f | wc -l)"
            echo ""
            echo "If you see this message, all linting checks passed! ðŸŽ‰"
            echo "Your code follows good Python style and quality standards."

  run-python-tests:
    executor: python/default

    steps:
      - checkout

      # Setup Python dependency caching
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "pyproject.toml" }}-{{ checksum "setup.py" }}
            # Fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run:
          name: "Install project with test dependencies"
          command: |
            python -m pip install --upgrade pip
            # First install pytest explicitly
            pip install pytest==7.4.0 pytest-cov==4.1.0
            # Then install the project in development mode with test dependencies
            pip install -e ".[test]"
            # Verify pytest is installed
            python -c "import pytest; print(f'Pytest version: {pytest.__version__}')"

      # Save the dependency cache for future runs
      - save_cache:
          key: v1-dependencies-{{ checksum "pyproject.toml" }}-{{ checksum "setup.py" }}
          paths:
            - ~/.cache/pip

      - run:
          name: "Check Python environment"
          command: |
            echo "Python executable path:"
            which python
            echo "Python version:"
            python --version
            echo "Pip version:"
            pip --version
            echo "Installed packages:"
            pip list
            echo "Current directory:"
            pwd
            echo "Directory contents:"
            ls -la

      - run:
          name: "Test importing the package"
          command: |
            echo "Trying to import the lumin_ai package..."
            echo "Python sys.path:"
            python -c "import sys; print('\n'.join(sys.path))"
            echo "PYTHONPATH environment variable:"
            echo $PYTHONPATH
            # Try importing the package
            python -c "import lumin_ai; print(f'Successfully imported lumin_ai version {lumin_ai.__version__}')"

      - run:
          name: "Run tests with coverage"
          command: |
            echo "Running tests with coverage analysis..."
            # Use python -m to ensure we use the correct environment
            python -m pytest --cov=lumin_ai --cov-report=xml --cov-report=html:.htmlcov tests/
            echo "Tests completed!"

      # Store coverage reports as artifacts only
      - store_artifacts:
          path: .htmlcov
          destination: html-coverage-report

      - store_artifacts:
          path: coverage.xml
          destination: coverage.xml

      - persist_to_workspace:
          root: .
          paths:
            - coverage.xml

# Define the workflows that determine when jobs run
workflows:
  version: 2

  # Linting workflow
  lint:
    jobs:
      - lint-python-code

  # Testing and coverage workflow
  test-and-coverage:
    jobs:
      - run-python-tests
      # Removed the separate codecov/upload job since we're now uploading directly from the run-python-tests job

# Optional: You can also set up the workflow to run on pull requests only
# This is useful if you want to save CircleCI credits by not running on every small commit
# Uncomment the section below and comment out the section above if you prefer this approach
#
# workflows:
#   version: 2
#   lint-on-pull-request:
#     jobs:
#       - lint-python-code:
#           filters:
#             branches:
#               ignore: main  # Don't run on main branch pushes
#             pull_requests:
#               only: /.*/    # Run on all pull requests
